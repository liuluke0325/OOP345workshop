
1.	The advantage that smart pointer syntax provides. 
The advantage of the smart pointer is that it will delete the pointer when the pointer goes out of the scope or the exception occurs. On the other hand, when using the raw pointer, we need to manually deallocate the dynamic memory or handling the exception to prevent the memory leak.



2. List the difference between raw and smart pointer syntax in your solution. 

In this case, because we need to share the ownership of the pointer(move to the vector), we must use sharted_ptr rather than unique_ptr.
In the Utilities:
Smart pointer:
std::shared_ptr<Product> product(new Product(desc[i].desc, price[j].price));

raw pointer:
Product* product = new Product(desc[i].desc, price[j].price);
					
					delete product;


In the List:
Smart Pointer:

		void operator += (std::shared_ptr<T> src) {
				list.push_back(std::move(*src));
		}


Raw Pointer:

		void operator += (T* src) {
			list.push_back(std::move(*src));
		}
